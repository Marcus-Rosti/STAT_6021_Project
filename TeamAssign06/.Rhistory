3+5
4^3
4^3
c(2,3,4,5)    # C stands for "combine" or "concatenate."
c(2,3,4,5) + c(1,4,2,3)
c(2,3,4)*2
c(2,3,4)^3
c(3,4,5) + 2
c(2,3,4,5) + c(5,10)
c(2,3,4,5,6) + c(1,2)
source('~/Documents/MSDS/Stat6430/day01.R', echo=TRUE)
c(1,2,5)^c(2,2,3)
c(1,2,5)^c(2,3)
1:10
3:15
12:2
seq(1,11,by=2)
seq(4,30, by=3)
rep(7,20)
load("~/Documents/Bootcamp/Day 1 - R/introR1.Rda")
library(ggplot2)
table <- sunspot.month
table <- matrix(table)
View(table)
table <- sunspot.month
table <- data.matrix(table)
View(table)
z <- AirPassengers
print(z)
z <- cars
print(z)
z <- eurodist
print(z)
table(z)
matrix(z)
data.frame(z)
x <- HairEyeColor
print(x)
matrix(x)
data.frame(x)
x <- HairEyeColor
data.frame(x)
table <- data.frame(x)
table <- -table$Sex
table.m <- melt(data)
library(reshape)
library(ggplot2)
library(scales)
library(plyr)
library(datasets)
table.m <- melt(data)
table <- data.frame(x)
View(table)
table.m <- melt(table)
table.m <- ddply(table.m, .(variable), transform, rescale = rescale(value))
p <- ggplot(data.m, aes(variable, Hair)) +
geom_tile(aes(fill = rescale), color = "white")
p + scale_fill_gradient(low = "white", high = "steelblue")
p <- ggplot(table.m, aes(variable, Hair)) +
geom_tile(aes(fill = rescale), color = "white")
p + scale_fill_gradient(low = "white", high = "steelblue")
View(table.m)
table <- data.frame(x)
table <- data.frame(x)
table$Sex <- NULL
View(table)
table.m <- melt(table)
p <- ggplot(table.m, aes(variable, Hair)) +
geom_tile(aes(fill = rescale), color = "white")
p + scale_fill_gradient(low = "white", high = "steelblue")
table$Sex <- NULL
table.m <- melt(table)
table.m <- ddply(table.m, .(variable), transform, rescale = rescale(value))
p <- ggplot(table.m, aes(variable, Hair)) +
geom_tile(aes(fill = rescale), color = "white")
p + scale_fill_gradient(low = "white", high = "steelblue")
table.m <- ddply(table.m, .(variable), transform, rescale = rescale(value))
p <- ggplot(table.m, aes(variable, Freq)) +
geom_tile(aes(fill = rescale), color = "white")
p + scale_fill_gradient(low = "white", high = "steelblue")
table.m <- ddply(table.m, .(variable), transform, rescale = rescale(value))
p <- ggplot(table.m, aes(variable, Hair)) +
geom_tile(aes(fill = rescale), color = "white")
p + scale_fill_gradient(low = "white", high = "steelblue")
table.m <- ddply(table.m, .(variable), transform, rescale = rescale(value))
View(table.m)
table.m <- melt(table)
table.m <- ddply(table.m, .(variable), transform, rescale = rescale(value))
p <- ggplot(table.m, aes(Eye, Hair)) +
geom_tile(aes(fill = rescale), color = "white")
p + scale_fill_gradient(low = "white", high = "steelblue")
table.m <- melt(table)
x <- HairEyeColor
table <- data.frame(x)
table$Sex <- NULL
table.m <- melt(table)
table.m <- ddply(table.m, .(variable), transform, rescale = rescale(value))
p <- ggplot(table.m, aes(Eye, Hair)) +
geom_tile(aes(fill = rescale), color = "white")
p + scale_fill_gradient(low = "white", high = "steelblue")
library(reshape)
library(ggplot2)
library(scales)
library(datasets)
x <- HairEyeColor
table <- data.frame(x)
table$Sex <- NULL
table.m <- melt(table)
table.m <- ddply(table.m, .(variable), transform, rescale = rescale(value))
p <- ggplot(table.m, aes(Eye, Hair)) +
geom_tile(aes(fill = rescale), color = "white")
p + scale_fill_gradient(low = "white", high = "steelblue")
library(reshape)
library(ggplot2)
library(scales)
x <- HairEyeColor
table <- data.frame(x)
table$Sex <- NULL
table.m <- melt(table)
table.m <- ddply(table.m, .(variable), transform, rescale = rescale(value))
p <- ggplot(table.m, aes(Eye, Hair)) +
geom_tile(aes(fill = rescale), color = "white")
p + scale_fill_gradient(low = "white", high = "steelblue")
x <- HairEyeColor
table <- data.frame(x)
table$Sex <- NULL
table.m <- melt(table)
table.m <- ddply(table.m, .(variable), transform, rescale = rescale(value))
p <- ggplot(table.m, aes(Eye, Hair)) +
geom_tile(aes(fill = rescale), color = "white")
p + scale_fill_gradient(low = "white", high = "steelblue")
library(reshape)
x <- HairEyeColor
table <- data.frame(x)
table$Sex <- NULL
table.m <- melt(table)
table.m <- ddply(table.m, .(variable), transform, rescale = rescale(value))
p <- ggplot(table.m, aes(Eye, Hair)) +
geom_tile(aes(fill = rescale), color = "white")
p + scale_fill_gradient(low = "white", high = "steelblue")
library(ggplot2)
library(plyr)
table.m <- melt(table)
table.m <- ddply(table.m, .(variable), transform, rescale = rescale(value))
p <- ggplot(table.m, aes(Eye, Hair)) +
geom_tile(aes(fill = rescale), color = "white")
p + scale_fill_gradient(low = "white", high = "steelblue")
library(scales)
library(datasets)
x <- HairEyeColor
table <- data.frame(x)
table$Sex <- NULL
table.m <- melt(table)
table.m <- ddply(table.m, .(variable), transform, rescale = rescale(value))
p <- ggplot(table.m, aes(Eye, Hair)) +
geom_tile(aes(fill = rescale), color = "white")
p + scale_fill_gradient(low = "white", high = "steelblue")
library(colorspace)
colorpalette  <- choose_palette()
colorpalette  <- choose_palette()
install.packages(zoo)
install.packages("zoo")
install.packages("XML")
library("XML")
install.packages("topicmodels")
library("zoo)
)
library("zoo")
install.packages("car")
install.packages("clusterGeneration")
install.packages("e1071")
install.packages("forecast")
library('RColorBrewer')
install.packages("h2o")
install.packages("RCurl")
install.packages("ks")
install.packages("rgl")
install.packages('rgdal', configure.args='--with-proj-include=/Library/Frameworks/PROJ.framework/Headers --with-gdal-config=/Library/Frameworks/GDAL.framework/unix/bin/gdal-config --with-proj-lib=/Library/Frameworks/PROJ.framework/unix/lib', configure.vars = 'CXX=g++',type="source")
install.packages("gdal-config")
install.packages('rgeos', configure.args='--with-geos-config=/Library/Frameworks/GEOS.framework/unix/bin/geos-config', configure.vars = 'CXX=g++',type="source")
install.packages("kernlab")
install.packages("lars")
install.packages("maptools")
install.packages("lubridate")
install.packages("MASS")
install.packages("openNLPmodels.en", repos = "http://datacube.wu.ac.at/", type = "source")
install.packages("openNLP")
install.packages("mlbench")
install.packages("RCurl")
install.packages("RCurl")
install.packages("rgdal")
install.packages("XML")
install.packages("topicmodels")
install.packages("tm")
install.packages("topicmodels")
install.packages("topicmodels", dependencies=TRUE)
install.packages("gsl")
install.packages("gsl")
install.packages("tm")
install.packages("SnowballC")
install.packages("rjson")
install.packages("rgeos")
install.packages("rgeos")
install.packages("rgdal")
install.packages("rgdal")
install.packages("rgdal")
install.packages("rgeos")
install.packages("rjson")
install.packages("statmod")
install.packages("survival")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("tools")
install.packages("tools")
install.packages("tools")
install.packages("tools")
install.packages(h2o)
install.packages("h2o")
install.packages("Car")
update.packages()
install.packages("Car")
install.packages("topicmodels")
install.packages("gsl")
install.packages("gsl")
install.packages("topicmodels")
install.packages("ks")
install.packages("rgl")
install.packages("rgl")
install.packages("rgl")
install.packages("ks")
install.packages("rgeos")
install.packages("car")
install.packages("car")
library(kernlab)
data(iris)
summary(iris)
set.seed(1230984)
random.indices = sample(1:nrow(iris))
num.training.observations = as.integer(0.75 * length(random.indices))
training.indices = random.indices[1:num.training.observations]
training.set = iris[training.indices,]
testing.indices = random.indices[(num.training.observations + 1):length(random.indices)]
testing.set = iris[testing.indices,]
svm.fit <- ksvm(Species ~ ., data = training.set, type="C-svc", kernel="vanilladot", C=100)
predictions = predict(svm.fit, newdata = testing.set)
sum(predictions == testing.set[,"Species"]) / nrow(testing.set)
svm.fit = ksvm(Species ~ ., data = training.set, type="C-svc", kernel="vanilladot", C=100, prob.model = TRUE)
predict(svm.fit, newdata = testing.set,type = "probabilities")
two.class.data = iris[iris$Species == "setosa" | iris$Species == "versicolor",c(1,2,5)]
svm.fit = ksvm(Species ~ ., data = two.class.data, type="C-svc", kernel="vanilladot", C=10)
plot(svm.fit,data = two.class.data)
svm.fit = ksvm(Species ~ ., data = two.class.data, type="C-svc", kernel="polydot", kpar=list(degree=1), C=10)
plot(svm.fit,data = two.class.data)
svm.fit = ksvm(Species ~ ., data = two.class.data, type="C-svc", kernel="polydot", kpar=list(degree=2), C=10)
plot(svm.fit,data = two.class.data)
svm.fit = ksvm(Species ~ ., data = two.class.data, type="C-svc", kernel="rbfdot", C=10)
plot(svm.fit,data = two.class.data)
setwd("~/Git/STAT_6021_Project/TeamAssign06")
trees <- read.csv("trees.csv", header=T)
View(trees)
library(XML)
library(tm)
install.packages("NLP")
install.packages("NLP")
install.packages("NLP")
install.packages("NLP")
library(XML)
library(tm)
library(NLP)
library(tm)
news = as.data.frame(xmlToDataFrame("Data/news_documents.xml", stringsAsFactors = FALSE)[,"c"])
setwd("~/Documents/MSDS/DataMining/Examples")
news = as.data.frame(xmlToDataFrame("Data/news_documents.xml", stringsAsFactors = FALSE)[,"c"])
setwd("~/Documents/MSDS/Stat6021")
pinot <- read.csv("linear_regression_5e_data_sets/Appendices/data-table-B11.csv",header=T)
gears <- read.csv("linear_regression_5e_data_sets/Appendices/data-table-B12.csv",header=T)
jets <- read.csv("linear_regression_5e_data_sets/Appendices/data-table-B13.csv",header=T)
inverter <- read.csv("linear_regression_5e_data_sets/Appendices/data-table-B14.csv",header=T)
pinot.lm <- lm(Quality ~ . -Region, data=pinot)
rstudent <- rstudent(pinot.lm)
leverageCutOff <- 2*5/38
print(influence.measures(pinot.lm))
sort(abs(rstudent), decreasing = TRUE)
gears.lm <- lm(pitch ~ ., data=gears)
rstudent <- rstudent(gears.lm)
sort(abs(rstudent), decreasing = TRUE)
leverageCutOff <- 2*5/32
print(influence.measures(gears.lm))
jets.lm <- lm(y ~ ., data=jets)
rstudent <- rstudent(jets.lm)
leverageCutOff <- 2*6/40
print(influence.measures(jets.lm))
sort(abs(rstudent), decreasing = TRUE)
inverter.lm <- lm(y ~ x1 + x2 + x3 + x4, data=inverter)
rstudent <- rstudent(inverter.lm)
sort(abs(rstudent), decreasing = TRUE)
print(influence.measures(inverter.lm))
gears.lm <- lm(pitch ~ ., data=gears)
summary(gears.lm)
residuals <- resid(gears.lm)
msres <- sum(residuals^2)/(nrow(gears)-6)
stanResiduals <- residuals/sqrt(msres)
sort(abs(stanResiduals), decreasing = TRUE)
rstudent <- rstudent(gears.lm)
sort(abs(rstudent), decreasing = TRUE)
print(influence.measures(gears.lm))
inverter.lm <- lm(y ~ x1 + x2 + x3 + x4, data=inverter)
rstudent <- rstudent(inverter.lm)
sort(abs(rstudent), decreasing = TRUE)
print(influence.measures(inverter.lm))
trees <- read.csv("trees.csv", header = T)
setwd("~/Git/STAT_6021_Project/TeamAssign06")
trees <- read.csv("trees.csv", header = T)
plot(trees$x, trees$y, col = "dark green")
ba_actual <- 311.906
r <- 37 #set radius
a <- pi * r ^ 2
A <- (750 + 2 * r) ^ 2
pi_i <- a / A
loop_lim <- 10 ^ 5
ba_area_estimate <- 0
ba_area_estimate_values <- rep(0,loop_lim)
start <- proc.time() #keep track of time it takes to run loop
for (i in 1:loop_lim) {
#get random points for circle
x1 <- runif(1,-r, 750 + r)
y1 <- runif(1,-r, 750 + r)
trees.sub <-
subset(trees,(trees$x - x1) ^ 2 + (trees$y - y1) ^ 2 <= 37 ^ 2)
ba_area_estimate <-
ba_area_estimate + (1 / pi_i) * sum(trees.sub$ba) / loop_lim
ba_area_estimate_values[i] <- (1 / pi_i) * sum(trees.sub$ba)
}
total_time <- proc.time() - start
percent_bias <- 100 * (ba_area_estimate - ba_actual) / ba_actual
rmse <- 100 * sqrt(var(ba_area_estimate_values)) / ba_actual
print(total_time)
print(total_time[3])
print(total_time[3], percent_bias, rmse)
print(percent_bias)
print(rmse)
ba_area_estimate
sum(ba_area_estimate_values)/loop_lim
print(str(total_time[3])
)
print(total_time[3][2])
print(total_time[3][1])
as.data.frame(total_time[3])
total_time[3][0]
total_time[3][2]
total_time[3][1]
